import {
  Table,
  Button,
  Modal,
  Form,
  Input,
  Upload,
  message,
  Switch,
  Space,
  Tag,
} from "antd";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import {
  getAudiosByComposer,
  deleteAudio,
  toggleAudioStatus,
  createAudio,
  updateAudio,
} from "../../../../../firebase/audio";
import {
  UploadOutlined,
  EditOutlined,
  DeleteOutlined,
  PlusOutlined,
} from "@ant-design/icons";
import { useState } from "react";

const SupplierPerformerSongsTab = ({ supplierPerformerId }) => {
  const queryClient = useQueryClient();
  const [form] = Form.useForm();
  const [isCreating, setIsCreating] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingAudio, setEditingAudio] = useState(null);
  const [isStatusChanging, setIsStatusChanging] = useState(false);
  const [messageApi, contextHolder] = message.useMessage();

  const success = ({ message = "–£—Å–ø–µ—Ö" }) => {
    messageApi.open({
      type: "success",
      content: message,
    });
  };

  const error = ({ message = "–û—à–∏–±–∫–∞" }) => {
    messageApi.open({
      type: "error",
      content: message,
    });
  };

  const { data: audios = [], isLoading } = useQuery({
    queryKey: ["audios", supplierPerformerId],
    queryFn: () => getAudiosByComposer(supplierPerformerId),
  });

  const showModal = (audio = null) => {
    setEditingAudio(audio);
    form.setFieldsValue({
      title: audio?.title || "",
      audioFile: undefined,
    });
    setIsModalVisible(true);
  };

  const handleSave = async () => {
    try {
      setIsCreating(true);
      const values = await form.validateFields();

      const file = values.audioFile?.file;

      if (!file && !editingAudio) {
        error({ message: "–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        return;
      }

      if (editingAudio) {
        // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await updateAudio(editingAudio.id, {
          text: values.title,
        });
        success({ message: "–ê—É–¥–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ" });
      } else {
        // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ
        const newAudio = {
          composerId: supplierPerformerId,
          text: values.title,
          file,
        };
        await createAudio(newAudio);
        success({ message: "–ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ" });
      }

      queryClient.invalidateQueries(["audios", supplierPerformerId]);
      form.resetFields();
      setIsModalVisible(false);
    } catch (err) {
      console.error(err)
      error({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏" });
    } finally {
      setIsCreating(false);
    }
  };

  const handleDelete = (audioId) => {
    Modal.confirm({
      title: "–£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ?",
      onOk: async () => {
        try {
          await deleteAudio(audioId);
          message.success("–£–¥–∞–ª–µ–Ω–æ");
          queryClient.invalidateQueries(["audios", supplierPerformerId]);
        } catch {
          message.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
        }
      },
    });
  };

  const handleToggleStatus = async (audioId) => {
    try {
      setIsStatusChanging(true);
      await toggleAudioStatus(audioId);
      queryClient.invalidateQueries(["audios", supplierPerformerId]);
      success({ message: "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!" });
    } catch {
      message.error("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞");
    } finally {
      setIsStatusChanging(false);
    }
  };

  const columns = [
    {
      title: "–ù–∞–∑–≤–∞–Ω–∏–µ",
      dataIndex: "title",
      width: 400,
    },
    {
      title: "–°—Å—ã–ª–∫–∞",
      dataIndex: "audioLink",
      render: (audio) => (
        <audio src={audio} controls style={{ width: "100%" }} />
      ),
      width: 400,
    },
    {
      title: "–î–µ–π—Å—Ç–≤–∏—è",
      render: (_, record) => (
        <Space>
          <Button
            icon={<EditOutlined />}
            onClick={() => showModal(record)}
            size="small"
          />
          <Button
            icon={<DeleteOutlined />}
            danger
            onClick={() => handleDelete(record.id)}
            size="small"
          />
        </Space>
      ),
      width: 100,
    },
  ];

  return (
    <div>
      {contextHolder}
      <div style={{ marginBottom: 16 }}>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => showModal()}
        >
          –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
        </Button>
      </div>

      <Table
        dataSource={audios}
        columns={columns}
        rowKey="id"
        loading={isLoading}
        pagination={false}
      />

      <Modal
        title={editingAudio ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ" : "–î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ"}
        open={isModalVisible}
        cancelText="–û—Ç–º–µ–Ω–∞"
        onCancel={() => setIsModalVisible(false)}
        onOk={handleSave}
        okButtonProps={{
          loading: isCreating,
        }}
        okText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="title"
            label="–ù–∞–∑–≤–∞–Ω–∏–µ"
            rules={[{ required: true, message: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" }]}
          >
            <Input />
          </Form.Item>
          {!editingAudio && (
            <Form.Item
              name="audioFile"
              label="–ê—É–¥–∏–æ —Ñ–∞–π–ª"
              getValueFromEvent={(e) => e}
              valuePropName="file"
              rules={
                editingAudio
                  ? []
                  : [{ required: true, message: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª" }]
              }
            >
              <Upload beforeUpload={() => false} maxCount={1} accept="audio/*">
                <Button icon={<UploadOutlined />}>–ó–∞–≥—Ä—É–∑–∏—Ç—å</Button>
              </Upload>
            </Form.Item>
          )}
        </Form>
      </Modal>
    </div>
  );
};

export default SupplierPerformerSongsTab;
